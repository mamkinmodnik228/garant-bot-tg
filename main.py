import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from sqlite import SQLite
from buttons import keyboard
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import re
from pyqiwip2p import QiwiP2P
from pyqiwip2p.types import QiwiCustomer
import random

logging.basicConfig(level=logging.INFO)

token = '1708389560:AAEUyLYSnLIBJ4ljznBSol7OGvxLQFdZ3sw'
bot = Bot(token=token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = SQLite('database.db')

qiwi_token = '56cb024ab4b044c96af183fea5c280f7'
p2p = QiwiP2P(auth_key=qiwi_token)

class Form(StatesGroup):
    creator_id = ''
    seller_id = ''
    customer_id = ''
    money = 0
    receiver_id = State()
    continue_deal = State()
    teams = State()
    cash = State()
    deals = State()

class Deposit(StatesGroup):
    cash = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if db.checkMember(message.from_user.id) is None:

        db.addMember(message.from_user.id, message.from_user.username)
        await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=await keyboard('start'))

    else:
        await message.answer('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', reply_markup=await keyboard('start'))


@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    if db.checkMember(message.from_user.id) is None:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    else:
        stats = db.stats(message.from_user.id)
        text = f"üîç –ü—Ä–æ—Ñ–∏–ª—å @{message.from_user.username}\nID: {stats[0]}\n–ë–∞–ª–∞–Ω—Å: {stats[1]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüí∞–ü—Ä–æ–¥–∞–∂–∏: {stats[2]} —à—Ç\nüõí–ü–æ–∫—É–ø–∫–∏: {stats[3]} —à—Ç\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        await message.answer(text, reply_markup=await keyboard('user_profile'))


@dp.message_handler(commands=['deals'])
async def deals(message: types.Message):
    if db.checkMember(message.from_user.id) is None:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–¥–µ–ª–∫–∏', reply_markup=await keyboard('deals'))


@dp.message_handler(commands=['search'])
async def search(message: types.Message):
    if db.checkMember(message.from_user.id) is None:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
    else:
        await Form.receiver_id.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É')


@dp.message_handler(state=Form.receiver_id)
async def process_receiver_id(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        if message.text.startswith('@'):
            data['receiver_id'] = message.text[1:]
        else:
            data['receiver_id'] = message.text

        if db.checkUser(data['receiver_id']) is None:
            await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await state.finish()
        else:
            if message.from_user.username == data['receiver_id']:
                await message.answer('–í—ã –≤–≤–µ–ª–∏ —Å–≤–æ–π –Ω–∏–∫')
            else:
                stats = db.stats_by_username(data['receiver_id'])
                if stats is None:
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω')
                    await state.finish()
                else:
                    text = f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{data['receiver_id']}\nID: {stats[0]}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüí∞–ü—Ä–æ–¥–∞–∂–∏: {stats[1]} —à—Ç\nüõí–ü–æ–∫—É–ø–∫–∏: {stats[2]} —à—Ç\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    await message.answer(text, reply_markup=await keyboard('profile'))
                    await Form.next()
                    # state.proxy()['second_id'] = stats[0]
                    data['creator_id'] = message.from_user.id
                    data['receiver_id'] = stats[0]


@dp.message_handler(state=Form.continue_deal)
async def process_continue(message: types.Message, state: FSMContext):

    if message.text == '–ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É':
        async with state.proxy() as data:
            if db.getDealCustomer(message.from_user.id) is None and db.getDealSeller(message.from_user.id) is None:
                if db.getDealCustomer(data['receiver_id']) is None and db.getDealSeller(data['receiver_id']) is None:
                    await message.answer('–ö–µ–º –≤—ã –±—É–¥–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ', reply_markup=await keyboard('deal_ts'))
                    await Form.next()
                else:
                    await message.answer('–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–¥–µ–ª–∫–µ!')
            else:
                await message.answer('–í—ã –≤ —Å–¥–µ–ª–∫–µ!')

    elif message.text == '–û—Ç–∑—ã–≤—ã':
        pass
    elif message.text == '–í—ã—Ö–æ–¥':
        await state.finish()
        await message.answer('–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', reply_markup=await keyboard('start'))


@dp.message_handler(state=Form.teams)
async def process_teams(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        if message.text == '–ü—Ä–æ–¥–∞–≤–µ—Ü':
            data['seller_id'] = message.from_user.id
            data['customer_id'] = data['receiver_id']
            await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–æ–¥–∞–≤–µ—Ü!', reply_markup=await keyboard('start'))
            await Form.next()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏')

        elif message.text == '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å':
            data['seller_id'] = data['receiver_id']
            data['customer_id'] = message.from_user.id
            await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å!', reply_markup=await keyboard('start'))
            await Form.next()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏')

        else:
            await state.finish()
            await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∏–ª–∏ –ü—Ä–æ–¥–∞–≤–µ—Ü',
                                 reply_markup=await keyboard('start'))


@dp.message_handler(state=Form.cash)
async def process_cash(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if re.search('\D', message.text):
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã')
            await state.finish()
        else:
            data['cash'] = message.text
            if int(message.text) > db.getCash(message.from_user.id)[0]:
                await message.answer(
                    f'–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–µ —á–µ–º –≤–∞—à –±–∞–ª–∞–Ω—Å ({data["cash"]} > {db.getCash(message.from_user.id)[0]})',
                    reply_markup=await keyboard('start'))
                await state.finish()

            if int(message.text) > db.getCash(data['receiver_id'])[0]:
                await message.answer('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É–º–º—ã!')
                await state.finish()
            if data['customer_id'] == message.from_user.id:
                if int(message.text) > db.getCash(message.from_user.id)[0]:
                    await message.answer(
                        f'–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤–≤–µ–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å ({data["cash"]} > {db.getCash(message.from_user.id)[0]})',
                        reply_markup=await keyboard('start'))
                    await state.finish()
            else:
                await message.answer(f"–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ ({data['cash']}) –≤—ã–±—Ä–∞–Ω–∞")
                await Form.next()
                text = f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {db.getNameByID(data['seller_id'])[0]}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {db.getNameByID(data['customer_id'])[0]}\n–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {data['cash']}"
                db.addDeal(data['seller_id'], data['customer_id'], data['cash'])
                await message.answer('–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n' + text)
                await bot.send_message(data['receiver_id'],
                                        f"–°–¥–µ–ª–∫–∞ –æ—Ç {db.getNameByID(data['creator_id'])[0]}\n{text}",
                                        reply_markup=await keyboard('new_deal'))
                await state.finish()


@dp.callback_query_handler(lambda call: True)
async def answer(call):
    if call.data == 'start_deal':
        await bot.send_message(call.from_user.id, '–ö–µ–º –≤—ã –±—É–¥–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ', reply_markup=await keyboard('deal_ts'))

    elif call.data == 'new_deal_accept':

        if db.getDealSeller(call.from_user.id) is None:
            dealInfo = db.getDealCustomer(call.from_user.id) # seller_id,customer_id,money,active,cancelled,end

            await bot.send_message(dealInfo[1],
                                   f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–¥–µ–ª–∫—É —Å {db.getNameByID(dealInfo[0])[0]}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –≤—ã–¥–∞–ª —Ç–æ–≤–∞—Ä',
                                   reply_markup=await keyboard('deal_confirm'))
            await bot.send_message(dealInfo[0],
                                   f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(dealInfo[1])[0]} –ø—Ä–∏–Ω—è–ª —Å–¥–µ–ª–∫—É —Å –≤–∞–º–∏! –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')

            db.withdrawBalance(dealInfo[1], dealInfo[3])
            db.setDealActive(dealInfo[0], 1)

        elif db.getDealCustomer(call.from_user.id) is None:

            dealInfo = db.getDealsSeller(call.from_user.id) # seller_id,customer_id,money,active,cancelled,end

            await bot.send_message(dealInfo[1],
                                   f'–í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–¥–µ–ª–∫—É —Å {db.getNameByID(dealInfo[0])[0]}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–¥–µ–ª–∫—É, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–≤–µ—Ü –≤—ã–¥–∞–ª —Ç–æ–≤–∞—Ä',
                                   reply_markup=await keyboard('deal_confirm'))
            await bot.send_message(dealInfo[0],
                                   f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(dealInfo[1])[0]} –ø—Ä–∏–Ω—è–ª —Å–¥–µ–ª–∫—É —Å –≤–∞–º–∏! –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞')

            db.withdrawBalance(dealInfo[1], dealInfo[3])
            db.setDealActive(dealInfo[0], 1)

        else:
            print('New Deal Accept without somebody')

    elif call.data == 'new_deal_decline':

        deals = db.getDealSeller(call.from_user.id)
        if deals is None:
            deals = db.getDealCustomer(call.from_user.id)
            await bot.send_message(deals[0], f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(deals[1])[0]} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏')
            await bot.send_message(deals[1], f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏ —Å {db.getNameByID(deals[0])[0]}')
            db.deleteDeal(deals[0])
        else:
            await bot.send_message(deals[0], f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(deals[1])[0]} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏')
            await bot.send_message(deals[1], f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏ —Å {db.getNameByID(deals[0])[0]}')
            db.deleteDeal(deals[0])


    elif call.data == 'dc_accept':

        deals = db.getDealCustomer(call.from_user.id)
        if deals:
            money = deals[2] - (deals[2] * 0.05)
            db.giveBalance(deals[0], money)
            seller_balance = db.getBalance(deals[0])[0]

            await bot.send_message(deals[0], f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(deals[1])[0]} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {money}\n–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {seller_balance}')
            await bot.send_message(deals[1], f'–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')
            db.setDealsCustomer(deals[1])
            db.setDealsSeller(deals[0])
            db.setDealActive(deals[0], 0)
            db.setDealEnd(deals[0], 1)

    elif call.data == 'dc_decline':

        if db.getDealSeller(call.from_user.id) is None:
            dealInfo = db.getDealCustomer(call.from_user.id) # seller_id,customer_id,money,active,cancelled,end

            await bot.send_message(dealInfo[1], f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ —Å {db.getNameByID(dealInfo[0])[0]}',
                                   reply_markup=await keyboard('start'))
            await bot.send_message(dealInfo[0],
                                   f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(dealInfo[1])[0]} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ —Å –≤–∞–º–∏!')

            db.giveBalance(dealInfo[0], dealInfo[3])
            db.setDealActive(dealInfo[0], 0)
            db.setDealEnd(dealInfo[0], 1)

        elif db.getDealCustomer(call.from_user.id) is None:

            dealInfo = db.getDealsSeller(call.from_user.id) # seller_id,customer_id,money,active,cancelled,end

            await bot.send_message(dealInfo[1], f'–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ —Å {db.getNameByID(dealInfo[0])[0]}',
                                   reply_markup=await keyboard('start'))

            await bot.send_message(dealInfo[0],
                                   f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {db.getNameByID(dealInfo[1])[0]} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–∫–∞–∑ —Å –≤–∞–º–∏!')

            db.giveBalance(dealInfo[0], dealInfo[3])
            db.setDealActive(dealInfo[0], 0)
            db.setDealEnd(dealInfo[0], 1)

    elif call.data == 'deposit':

        await Deposit.cash.set()
        await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')


    elif call.data == 'withdraw':
        pass

    elif call.data == 'user_active_deals':
        await bot.send_message(call.from_user.id, '–í—ã–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã ',
                               reply_markup=await keyboard('deals_active'))

    elif call.data == 'user_past_deals':
        await bot.send_message(call.from_user.id, '–í—ã–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≥–¥–µ –≤—ã ',
                               reply_markup=await keyboard('deals_none'))

    elif call.data == 'user_active_deals_seller':
        deals = db.getDealsActiveSeller(call.from_user.id)
        if len(deals) == 0:
            await bot.send_message(call.from_user.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, –≥–¥–µ –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü')
        else:
            text = []
            for x in deals:
                text.append(f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {db.getNameByID(x[0])[0]}\n–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {x[1]}\n\n')

            await bot.send_message(call.from_user.id, ''.join(text))

    elif call.data == 'user_active_deals_customer':
        deals = db.getDealsActiveCustomer(call.from_user.id)
        if len(deals) == 0:
            await bot.send_message(call.from_user.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫, –≥–¥–µ –≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å')
        else:
            text = []
            for x in deals:
                text.append(f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {db.getNameByID(x[0])[0]}\n–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {x[1]}\n\n')

            await bot.send_message(call.from_user.id, ''.join(text))

    elif call.data == 'user_deals_seller':
        deals = db.getDealsSeller(call.from_user.id)
        if len(deals) == 0:
            await bot.send_message(call.from_user.id, '–ù–µ—Ç —Å–¥–µ–ª–æ–∫, –≥–¥–µ –≤—ã –ø—Ä–æ–¥–∞–≤–µ—Ü')
        else:
            text = []
            for x in deals:
                text.append(f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {db.getNameByID(x[0])[0]}\n–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {x[1]}\n\n')

            await bot.send_message(call.from_user.id, ''.join(text))


    elif call.data == 'user_deals_customer':
        deals = db.getDealsCustomer(call.from_user.id)
        if len(deals) == 0:
            await bot.send_message(call.from_user.id, '–ù–µ—Ç —Å–¥–µ–ª–æ–∫, –≥–¥–µ –≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å')
        else:
            text = []
            for x in deals:
                text.append(f'–ü—Ä–æ–¥–∞–≤–µ—Ü: {db.getNameByID(x[0])[0]}\n–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {x[1]}\n\n')

            await bot.send_message(call.from_user.id, ''.join(text))

@dp.message_handler(state=Deposit.cash)
async def deposit_get_cash(message: types.Message, state = FSMContext):

    if message.text.isdigit():
        async with state.proxy() as data:

            data['cash'] = message.text
            amount = message.text
            lifetime = 10  # –§–æ—Ä–º–∞ –±—É–¥–µ—Ç –∂–∏—Ç—å 15 –º–∏–Ω—É—Ç
            comment = f'{message.from_user.id} payment'  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            bill_id = random.randint(0, 9999999)
            db.deposit(bill_id, message.from_user.id, amount, comment, 'wait')
            bill = p2p.bill(bill_id=bill_id, amount=amount, comment=comment)  # –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
            message_payment = await bot.send_message(message.from_user.id,
                                                     text=f'–£ –≤–∞—Å –µ—Å—Ç—å {lifetime} –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É!\n–°—É–º–º–∞: {amount}‚ÇΩ\n–°—Å—ã–ª–∫–∞:\n{bill.pay_url}')  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É —á–µ–ª–æ–≤–µ–∫—É

@dp.message_handler(commands=['cash'])
async def get_cash(message: types.Message):

    cash = db.getBalance(message.from_user.id)[0]
    await message.answer(f'cash: {cash}')

@dp.message_handler(content_types=['text'])
async def text(message: types.Message):
    if message.text == '–û –Ω–∞—Å':
        await message.answer(
            '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @kings_555\n–ù–∞—à —á–∞—Ç: https://t.me/Yslugi_LOUIS_VUITTON\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é: https://t.me/Yslugi_LOUIS_VUITTON')

    elif message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        await stats(message)

    elif message.text == '–°–¥–µ–ª–∫–∏':
        await deals(message)

    elif message.text == '–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        await search(message)

async def check_payments():
    payments = db.getAllPayments()

    if payments is None:
        print('No new additions found')

    for x in range(0, len(payments)):
        try:
            status = p2p.check(bill_id=payments[x][0]) # bill_id - –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞
            if status.status == 'PAID': # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –æ–ø–ª–∞—á–µ–Ω (PAID)

                userid = db.getUserIdFromPayment(payments[x][0])[0]
                amount = db.getAmountFromPayment(payments[x][0])[0]

                db.updatePaymentStatus(payments[x][0], 'success')
                await bot.send_message(text=f'–û–ø–ª–∞—Ç–∞ –Ω–∞ {amount} —Ä—É–±. –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', chat_id = userid)
                db.giveBalance(userid, int(amount))
        except Exception as error:
            print(error)

def repeat_payment(coro, loop):
    asyncio.ensure_future(coro(), loop=loop)
    loop.call_later(8, repeat_payment, coro, loop)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.call_later(8, repeat_payment, check_payments, loop)
    executor.start_polling(dp, skip_updates=True)
